# Configuration file.
%kube.quarkus.http.port=8080

# Configure the log level.
%kube.quarkus.log.level={spec.microcks.logLevel}
%kube.quarkus.log.console.level={spec.microcks.logLevel}

# Access to Microcks API server.
%kube.io.github.microcks.minion.async.client.MicrocksAPIConnector/mp-rest/url=http://{name}:8080
%kube.microcks.serviceaccount={spec.keycloak.serviceAccount}
%kube.microcks.serviceaccount.credentials={spec.keycloak.serviceAccountCredentials}

{#if spec.keycloak.privateUrl != null}
# Access to Keycloak URL if you override the one coming from Microcks config
keycloak.auth.url={spec.keycloak.privateUrl}
{/if}
{#if spec.keycloak.install && spec.keycloak.privateUrl == null}
# Access to Keycloak URL if you override the one coming from Microcks config
keycloak.auth.url=http://{name}-keycloak.{namespace}.svc.cluster.local:8080
{/if}

# Access to Kafka broker.
{#if spec.features.async.kafka.install}
%kube.kafka.bootstrap.servers={name}-kafka-kafka-bootstrap:9092
%kube.mp.messaging.incoming.microcks-services-updates.bootstrap.servers={name}-kafka-kafka-bootstrap:9092
{#else}
%kube.kafka.bootstrap.servers={spec.features.async.kafka.url}
%kube.mp.messaging.incoming.microcks-services-updates.bootstrap.servers={spec.features.async.kafka.url}

{#if spec.features.async.kafka.authentication.type == "SSL"}
%kube.kafka.security.protocol=SSL
{#if spec.features.async.kafka.authentication.truststoreSecretRef != null}

%kube.kafka.ssl.truststore.location=/deployments/config/kafka/truststore/{spec.features.async.kafka.authentication.truststoreSecretRef.additionalProperties.get('storeKey')}
%kube.kafka.ssl.truststore.password={|${KAFKA_TRUSTSTORE_PASSWORD}|}
%kube.kafka.ssl.truststore.type={spec.features.async.kafka.authentication.truststoreType}
{/if}

%kube.kafka.ssl.keystore.location=/deployments/config/kafka/keystore/{spec.features.async.kafka.authentication.keystoreSecretRef.additionalProperties.get('storeKey')}
%kube.kafka.ssl.keystore.password={|${KAFKA_KEYSTORE_PASSWORD}|}
%kube.kafka.ssl.keystore.type={spec.features.async.kafka.authentication.keystoreType}

%kube.mp.messaging.incoming.microcks-services-updates.security.protocol=SSL
{#if spec.features.async.kafka.authentication.truststoreSecretRef != null}

%kube.mp.messaging.incoming.microcks-services-updates.ssl.truststore.location=/deployments/config/kafka/truststore/{spec.features.async.kafka.authentication.truststoreSecretRef.additionalProperties.get('storeKey')}
%kube.mp.messaging.incoming.microcks-services-updates.ssl.truststore.password={|${KAFKA_TRUSTSTORE_PASSWORD}|}
%kube.mp.messaging.incoming.microcks-services-updates.ssl.truststore.type={spec.features.async.kafka.authentication.truststoreType}
{/if}

%kube.mp.messaging.incoming.microcks-services-updates.ssl.keystore.location=/deployments/config/kafka/keystore/{spec.features.async.kafka.authentication.keystoreSecretRef.additionalProperties.get('storeKey')}
%kube.mp.messaging.incoming.microcks-services-updates.ssl.keystore.password={|${KAFKA_KEYSTORE_PASSWORD}|}
%kube.mp.messaging.incoming.microcks-services-updates.ssl.keystore.type={spec.features.async.kafka.authentication.keystoreType}  
{#else if spec.features.async.kafka.authentication.type == "SASL_SSL"}
%kube.kafka.security.protocol=SASL_SSL
{#if spec.features.async.kafka.authentication.truststoreSecretRef != null}

%kube.kafka.ssl.truststore.location=/deployments/config/kafka/truststore/{spec.features.async.kafka.authentication.truststoreSecretRef.additionalProperties.get('storeKey')}
%kube.kafka.ssl.truststore.password={|${KAFKA_TRUSTSTORE_PASSWORD}|}
%kube.kafka.ssl.truststore.type={spec.features.async.kafka.authentication.truststoreType}
{/if}

%kube.kafka.sasl.mechanism={spec.features.async.kafka.authentication.saslMechanism}
%kube.kafka.sasl.jaas.config={spec.features.async.kafka.authentication.saslJaasConfig}

%kube.mp.messaging.incoming.microcks-services-updates.security.protocol=SASL_SSL
{#if spec.features.async.kafka.authentication.truststoreSecretRef != null}

%kube.mp.messaging.incoming.microcks-services-updates.ssl.truststore.location=/deployments/config/kafka/truststore/{spec.features.async.kafka.authentication.keystoreSecretRef.additionalProperties.get('storeKey')}
%kube.mp.messaging.incoming.microcks-services-updates.ssl.truststore.password={|${KAFKA_TRUSTSTORE_PASSWORD}|}
%kube.mp.messaging.incoming.microcks-services-updates.ssl.truststore.type={spec.features.async.kafka.authentication.truststoreType}
{/if}

%kube.mp.messaging.incoming.microcks-services-updates.sasl.mechanism={spec.features.async.kafka.authentication.saslMechanism}
%kube.mp.messaging.incoming.microcks-services-updates.sasl.jaas.config={spec.features.async.kafka.authentication.saslJaasConfig}
{/if}
{/if}

{#if spec.features.async.kafka.schemaRegistry != null && spec.features.async.kafka.schemaRegistry.url != null}
# Access to Kafka schema registry.
%kube.kafka.schema.registry.url={spec.features.async.kafka.schemaRegistry.url }}
%kube.kafka.schema.registry.confluent={spec.features.async.kafka.schemaRegistry.confluentCompatibility}
%kube.kafka.schema.registry.username={spec.features.async.kafka.schemaRegistry.username}
%kube.kafka.schema.registry.credentials.source={spec.features.async.kafka.schemaRegistry.credentialsSource}
{/if}

# Access to MQTT broker.
{#if spec.features.async.mqtt.url != null}
%kube.mqtt.server={spec.features.async.mqtt.url}
%kube.mqtt.username={spec.features.async.mqtt.username}
%kube.mqtt.password={spec.features.async.mqtt.password}
{#else}
%kube.mqtt.server=localhost:1883
%kube.mqtt.username=microcks
%kube.mqtt.password=microcks
{/if}

# Access to AMQP broker.
{#if spec.features.async.amqp.url != null}
%kube.amqp.server={spec.features.async.amqp.url}
%kube.amqp.username={spec.features.async.amqp.username}
%kube.amqp.password={spec.features.async.amqp.password}
{#else}
%kube.amqp.server=localhost:5672
%kube.amqp.username=microcks
%kube.amqp.password=microcks
{/if}

# Access to NATS broker.
{#if spec.features.async.nats.url != null}
%kube.nats.server={spec.features.async.nats.url}
%kube.nats.username={spec.features.async.nats.username}
%kube.nats.password={spec.features.async.nats.password}
{#else}
%kube.nats.server=localhost:4222
%kube.nats.username=microcks
%kube.nats.password=microcks
{/if}

# Access to GOOGLEPUBSUB broker.
{#if spec.features.async.googlepubsub.project != null}
%kube.googlepubsub.project={spec.features.async.googlepubsub.project}
{#if spec.features.async.googlepubsub.serviceAccountSecretRef != null}
%kube.googlepubsub.service-account-location=/deployments/config/googlepubsub/sa/{spec.features.async.googlepubsub.serviceAccountSecretRef.additionalProperties.get('fileKey')}
{/if}
{#else}
%kube.googlepubsub.project=my-project
%kube.googlepubsub.service-account-location=/deployments/config/googlecloud-service-account.json
{/if}

# Access to Amazon SQS broker.
{#if spec.features.async.sqs.region != null}
%kube.amazonsqs.project={spec.features.async.sqs.region}
%kube.amazonsqs.credentials-type={spec.features.async.sqs.credentialsType}
{#if spec.features.async.sqs.credentialsType == 'profile' && spec.features.async.sqs.credentialsSecretRef != null}
%kube.amazonsqs.credentials-profile-name={spec.features.async.sqs.credentialsProfile}
%kube.amazonsqs.credentials-profile-location=/deployments/config/amazon-sqs/{spec.features.async.sqs.credentialsSecretRef.additionalProperties.get('fileKey')}
{/if}
{/if}

# Access to Amazon SNS broker.
{#if spec.features.async.sns.region != null}
%kube.amazonsns.project={spec.features.async.sns.region}
%kube.amazonsns.credentials-type={spec.features.async.sns.credentialsType}
{#if spec.features.async.sns.credentialsType == 'profile' && spec.features.async.sqs.credentialsSecretRef != null}
%kube.amazonsns.credentials-profile-name={spec.features.async.sns.credentialsProfile}
%kube.amazonsns.credentials-profile-location=/deployments/config/amazon-sns/{spec.features.async.sns.credentialsSecretRef.additionalProperties.get('fileKey')}
{/if}
{/if}

# Configure the minion own behavioral properties.
%kube.minion.supported-bindings=KAFKA,WS{#if spec.features.async.mqtt.url != null},MQTT{/if}{#if spec.features.async.amqp.url != null},AMQP{/if}{#if spec.features.async.nats.url != null},NATS{/if}{#if spec.features.async.googlepubsub.project != null},GOOGLEPUBSUB{/if}{#if spec.features.async.sqs.region != null},SQS{/if}{#if spec.features.async.sns.region != null},SNS{/if}

%kube.minion.restricted-frequencies=3,10,30
%kube.minion.default-avro-encoding={spec.features.async.defaultAvroEncoding}