# Application configuration properties
tests-callback.url=http://{name}:8080
postman-runner.url=http://{name}-postman-runtime:8080
async-minion.url=http://{name}-async-minion:8080

network.username=
network.password=

validation.resourceUrl=https://{spec.microcks.url}/api/resources/
services.update.interval={|${SERVICES_UPDATE_INTERVAL:0 0 0/2 * * *}|}
mocks.rest.enable-cors-policy={|${ENABLE_CORS_POLICY:true}|}
mocks.enable-invocation-stats={spec.microcks.mockInvocationStats}

# Logging configuration properties
logging.config=/deployments/config/logback.xml

# Spring Security adapter configuration properties
spring.security.oauth2.client.registration.keycloak.client-id=microcks-app
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid,profile
spring.security.oauth2.client.provider.keycloak.issuer-uri={|${KEYCLOAK_URL}/realms/${keycloak.realm}|}
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
spring.security.oauth2.resourceserver.jwt.issuer-uri={|${sso.public-url}/realms/${keycloak.realm}|}
{#if spec.keycloak.privateUrl != null}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri={|${KEYCLOAK_URL}/realms/${keycloak.realm}/protocol/openid-connect/certs|}
{/if}
{#if spec.keycloak.install && spec.keycloak.privateUrl == null}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://{name}-keycloak.{namespace}.svc.cluster.local:8080/realms/{spec.keycloak.realm}/protocol/openid-connect/certs
{/if}

# Keycloak configuration properties
keycloak.auth-server-url={|${KEYCLOAK_URL}|}
keycloak.realm={spec.keycloak.realm}
keycloak.resource=microcks-app
keycloak.use-resource-role-mappings=true
keycloak.bearer-only=true
keycloak.ssl-required=external
keycloak.disable-trust-manager=true

# Keycloak access configuration properties
sso.public-url={|${KEYCLOAK_PUBLIC_URL:${keycloak.auth-server-url}}|}

# Async mocking support.
async-api.enabled={spec.features.async.enabled}
async-api.default-binding={spec.features.async.defaultBinding}
async-api.default-frequency={spec.features.async.defaultFrequency}

# Kafka configuration properties
spring.kafka.producer.bootstrap-servers={| ${KAFKA_BOOTSTRAP_SERVER:localhost:9092} |}
{#if spec.features.async.kafka.install}
{#if spec.features.async.kafka.authentication.type == "SSL"}
spring.kafka.producer.properties.security.protocol=SSL
{#if spec.features.async.kafka.authentication.truststoreSecretRef != null}

spring.kafka.producer.properties.ssl.truststore.location=/deployments/config/kafka/truststore/{spec.features.async.kafka.authentication.truststoreSecretRef.additionalProperties.get('storeKey')}
spring.kafka.producer.properties.ssl.truststore.password={|${KAFKA_TRUSTSTORE_PASSWORD}|}
spring.kafka.producer.properties.ssl.truststore.type={spec.features.async.kafka.authentication.truststoreType}
{/if}

spring.kafka.producer.properties.ssl.keystore.location=/deployments/config/kafka/keystore/{spec.features.async.kafka.authentication.keystoreSecretRef.additionalProperties.get('storeKey')}
spring.kafka.producer.properties.ssl.keystore.password={|${KAFKA_KEYSTORE_PASSWORD}|}
spring.kafka.producer.properties.ssl.keystore.type={spec.features.async.kafka.authentication.keystoreType}
{#else if spec.features.async.kafka.authentication.type == "SASL_SSL"}
spring.kafka.producer.properties.security.protocol=SASL_SSL
{#if spec.features.async.kafka.authentication.truststoreSecretRef != null}

spring.kafka.producer.properties.ssl.truststore.location=/deployments/config/kafka/truststore/{spec.features.async.kafka.authentication.truststoreSecretRef.additionalProperties.get('storeKey')}
spring.kafka.producer.properties.ssl.truststore.password={|${KAFKA_TRUSTSTORE_PASSWORD}|}
spring.kafka.producer.properties.ssl.truststore.type={spec.features.async.kafka.authentication.truststoreType}
{/if}

spring.kafka.producer.properties.sasl.mechanism={spec.features.async.kafka.authentication.saslMechanism}
spring.kafka.producer.properties.sasl.jaas.config={spec.features.async.kafka.authentication.saslJaasConfig}
{/if}
{/if}

# Grpc server properties
grpc.server.certChainFilePath=/deployments/config/grpc/tls.crt
grpc.server.privateKeyFilePath=/deployments/config/grpc/tls.key

# AI Copilot configuration properties
ai-copilot.enabled={spec.features.aiCopilot.enabled ?: 'false'}
ai-copilot.implementation={spec.features.aiCopilot.implementation}
{#if spec.features.aiCopilot.implementation == "openai" && spec.features.aiCopilot.openai}
ai-copilot.openai.api-key={spec.features.aiCopilot.openai.apiKey}
{#if spec.features.aiCopilot.openai && spec.features.aiCopilot.openai.apiUrl != null}
ai-copilot.openai.api-url={spec.features.aiCopilot.openai.apiUrl}
{/if}
{#if spec.features.aiCopilot.openai.timeout != null && spec.features.aiCopilot.openai.timeout != 0}
ai-copilot.openai.timeout={spec.features.aiCopilot.openai.timeout}
{/if}
{#if spec.features.aiCopilot.openai.model != null}
ai-copilot.openai.model={spec.features.aiCopilot.openai.model}
{/if}
{#if spec.features.aiCopilot.openai.maxTokens != null}
ai-copilot.openai.maxTokens={spec.features.aiCopilot.openai.maxTokens}
{/if}
{/if}