# Application configuration properties
tests-callback.url=http://{name}:8080
postman-runner.url=http://{name}-postman-runtime:8080
async-minion.url=http://{name}-async-minion:8080

network.username=
network.password=

validation.resourceUrl=https://{spec.microcks.url}/api/resources/
services.update.interval={|${SERVICES_UPDATE_INTERVAL:0 0 0/2 * * *}|}
mocks.rest.enable-cors-policy={|${ENABLE_CORS_POLICY:true}|}
mocks.enable-invocation-stats={spec.microcks.mockInvocationStats}

# Logging configuration properties
logging.config=/deployments/config/logback.xml

# Keycloak configuration properties
keycloak.auth-server-url={|${KEYCLOAK_URL:http://localhost:8180/auth}|}
keycloak.realm={spec.keycloak.realm}
keycloak.resource=microcks-app
keycloak.use-resource-role-mappings=true
keycloak.bearer-only=true
keycloak.ssl-required=external
keycloak.disable-trust-manager=true

keycloak.security-constraints[0].authRoles[0]=admin
keycloak.security-constraints[0].authRoles[1]=manager
keycloak.security-constraints[0].authRoles[2]=user
keycloak.security-constraints[0].securityCollections[0].name=Insecure stuffs
keycloak.security-constraints[0].securityCollections[0].patterns[0]=/api/services
keycloak.security-constraints[0].securityCollections[0].patterns[1]=/api/services/*
keycloak.security-constraints[0].securityCollections[0].patterns[2]=/api/jobs
keycloak.security-constraints[0].securityCollections[0].patterns[3]=/api/jobs/*

# Keycloak access configuration properties
sso.public-url={|${KEYCLOAK_PUBLIC_URL:${keycloak.auth-server-url}}|}

# Async mocking support.
async-api.enabled={spec.features.async.enabled}
async-api.default-binding={spec.features.async.defaultBinding}
async-api.default-frequency={spec.features.async.defaultFrequency}

# Kafka configuration properties
spring.kafka.producer.bootstrap-servers={| ${KAFKA_BOOTSTRAP_SERVER:localhost:9092} |}
{#if spec.features.async.kafka.install}
{#if spec.features.async.kafka.authentication.type == "SSL"}
spring.kafka.producer.properties.security.protocol=SSL
{#if spec.features.async.kafka.authentication.truststoreSecretRef != null}

spring.kafka.producer.properties.ssl.truststore.location=/deployments/config/kafka/truststore/{spec.features.async.kafka.authentication.truststoreSecretRef.additionalProperties.get('storeKey')}
spring.kafka.producer.properties.ssl.truststore.password={|${KAFKA_TRUSTSTORE_PASSWORD}|}
spring.kafka.producer.properties.ssl.truststore.type={spec.features.async.kafka.authentication.truststoreType}
{/if}

spring.kafka.producer.properties.ssl.keystore.location=/deployments/config/kafka/keystore/{spec.features.async.kafka.authentication.keystoreSecretRef.additionalProperties.get('storeKey')}
spring.kafka.producer.properties.ssl.keystore.password={|${KAFKA_KEYSTORE_PASSWORD}|}
spring.kafka.producer.properties.ssl.keystore.type={spec.features.async.kafka.authentication.keystoreType}
{#else if spec.features.async.kafka.authentication.type == "SASL_SSL"}
spring.kafka.producer.properties.security.protocol=SASL_SSL
{#if spec.features.async.kafka.authentication.truststoreSecretRef != null}

spring.kafka.producer.properties.ssl.truststore.location=/deployments/config/kafka/truststore/{spec.features.async.kafka.authentication.truststoreSecretRef.additionalProperties.get('storeKey')}
spring.kafka.producer.properties.ssl.truststore.password={|${KAFKA_TRUSTSTORE_PASSWORD}|}
spring.kafka.producer.properties.ssl.truststore.type={spec.features.async.kafka.authentication.truststoreType}
{/if}

spring.kafka.producer.properties.sasl.mechanism={spec.features.async.kafka.authentication.saslMechanism}
spring.kafka.producer.properties.sasl.jaas.config={spec.features.async.kafka.authentication.saslJaasConfig}
{/if}
{/if}

# Grpc server properties
grpc.server.certChainFilePath=/deployments/config/grpc/tls.crt
grpc.server.privateKeyFilePath=/deployments/config/grpc/tls.key