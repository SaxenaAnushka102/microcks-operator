apiVersion: microcks.io/v1alpha1
kind: Microcks
metadata:
  name: microcks
spec:
  version: latest

  microcks:
    replicas: 1
    ingress:
      generateCert: true

    mockInvocationStats: true
    logLevel: INFO

    resources:
      requests:
        cpu: 200m
        memory: 400Mi
    env:
      - name: SERVICES_UPDATE_INTERVAL
        value: 0 0 0/2 * * *

    openshift:
      route:
        enabled: true
        tlsTermination: edge

  postman:
    replicas: 1

  keycloak:
    install: true
    realm: microcks
    ingress:
      generateCert: true

    volumeSize: 1Gi

    serviceAccount: microcks-serviceaccount
    serviceAccountCredentials: ab54d329-e435-41ae-a900-ec6b3fe15c54

    resources:
      requests:
        cpu: 400m
        memory: 400Mi

    openshift:
      route:
        enabled: true
        type: edge

  mongodb:
    install: true
    persistent: true
    volumeSize: 2Gi

    resources:
      requests:
        cpu: 250m
        memory: 400Mi

  features:
    async:
      enabled: false
      kafka:
        install: true
        schemaRegistry:
          confluent: true
          username: ""
          credentialsSource: USER_INFO
        authentication:
          # If not 'NONE', we support 'SSL' for mutual TLS and 'SASL_SSL' for SASL over TLS.
          type: NONE
          # For TLS transport, you'll always need a truststore to hold your cluster certificate.
          # You have to setup a truststore type and a secret reference for retrieving content and password.
          truststoreType: PKCS12
          #truststore_secret_ref:
            #secret: kafka-cluster-ca-cert
            #store_key: ca.p12
            #password_key: ca.password
          # For mutual TLS authentication, you'll also need a keystore to hold your user private key.
          # You have to setup a keystore type and a secret reference for retrieving content and password.
          keystoreType: PKCS12
          keystoreSecretRef:
            secret: mtls-user
            store_key: user.p12
            password_key: user.password
          # For SASL authentication, you'll have to specify an additional authentication mechanism
          # as well as a JAAS configuration line with login module, username and password.
          #sasl_mechanism: SCRAM-SHA-512
          #sasl_jaas_config: org.apache.kafka.common.security.scram.ScramLoginModule required username="scram-user" password="tDtDCT3pYKE5";

    repositoryFilter:
      enabled: false
      labelKey: domain
      labelLabel: Domain
      labelList: domain,status

    repositoryTenancy:
      enabled: false
      artifactImportAllowedRoles: admin,manager,manager-any

    microcksHub:
      enabled: true
      allowedRoles: admin,manager,manager-any